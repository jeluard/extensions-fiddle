["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.core","~:imports",null,"~:requires",["^ ","~$pluto.reader.events","^:","~$cljs.tools.reader.edn","^;","~$pluto.reader.views","^<","~$views","^<","~$clojure.tools.reader.edn","^;","~$events","^:","~$pluto.error","^@","~$string","~$clojure.string","~$types","~$pluto.reader.types","~$pluto.utils","^E","^D","^D","~$utils","^E","^B","^B","~$edn","^;","~$error","^@"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$meta-properties",["^ ","^6","~$pluto.core/meta-properties","~:file","resources/public/js/compiled/pluto/core.cljc","~:line",48,"~:column",1,"~:end-line",48,"~:end-column",31,"~:private",true,"~:meta",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",48,"^P",16,"^Q",48,"^R",31,"^S",true],"~:tag","~$cljs.core/IMap"],"~$parse-value",["^ ","^6","~$pluto.core/parse-value","^N","resources/public/js/compiled/pluto/core.cljc","^O",35,"^P",1,"^Q",35,"^R",22,"~:doc","Parse an extension value from its type","^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",35,"^P",11,"^Q",35,"^R",22,"^Y","Parse an extension value from its type"],"^U","~$cljs.core/MultiFn"],"~$reader-error",["^ ","~:protocol-inline",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",12,"^P",8,"^Q",12,"^R",20,"^S",true,"~:arglists",["~#list",["~$quote",["^12",[["~$ex"]]]]]],"^S",true,"^6","~$pluto.core/reader-error","^N","resources/public/js/compiled/pluto/core.cljc","^R",20,"~:method-params",["^12",[["^14"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^P",1,"~:variadic?",false,"^O",12,"~:ret-tag",["^4",["~$clj","~$any","^V"]],"^Q",12,"~:max-fixed-arity",1,"~:fn-var",true,"^11",["^12",["^13",["^12",[["^14"]]]]]],"~$accumulate",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",87,"^P",8,"^Q",87,"^R",18,"^S",true,"^11",["^12",["^13",["^12",[["~$ctx","~$ext","~$acc","~$k","~$v"]]]]],"^Y","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^S",true,"^6","~$pluto.core/accumulate","^N","resources/public/js/compiled/pluto/core.cljc","^R",18,"^16",["^12",[["^1@","^1A","^1B","~$k","~$v"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",87,"^1:",["^4",["^1;","^1<"]],"^Q",87,"^1=",5,"^1>",true,"^11",["^12",["^13",["^12",[["^1@","^1A","^1B","~$k","~$v"]]]]],"^Y","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"~$key-name",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",33,"^P",7,"^Q",33,"^R",15,"^11",["^12",["^13",["^12",[["~$k"]]]]]],"^6","~$pluto.core/key-name","^N","resources/public/js/compiled/pluto/core.cljc","^R",15,"^16",["^12",[["~$k"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",33,"^1:","^A","^Q",33,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$k"]]]]]],"^5",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",19,"^P",7,"^Q",19,"^R",11,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^Y","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"^6","~$pluto.core/read","^N","resources/public/js/compiled/pluto/core.cljc","^R",11,"^16",["^12",[["~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",19,"^Q",19,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^Y","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"~$hook-type",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",62,"^P",7,"^Q",62,"^R",16,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^Y","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"^6","~$pluto.core/hook-type","^N","resources/public/js/compiled/pluto/core.cljc","^R",16,"^16",["^12",[["~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",62,"^1:",["^4",["^1<","~$clj-nil"]],"^Q",62,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^Y","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"~$order-comparator",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",101,"^P",8,"^Q",101,"^R",24,"^S",true,"^11",["^12",["^13",["^12",[["~$k1","~$k2"]]]]],"^Y","Compares keys based on `order`"],"^S",true,"^6","~$pluto.core/order-comparator","^N","resources/public/js/compiled/pluto/core.cljc","^R",24,"^16",["^12",[["^1K","^1L"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",101,"^1:","~$number","^Q",101,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["^1K","^1L"]]]]],"^Y","Compares keys based on `order`"],"~$lifecycle-properties",["^ ","^6","~$pluto.core/lifecycle-properties","^N","resources/public/js/compiled/pluto/core.cljc","^O",74,"^P",1,"^Q",74,"^R",36,"^S",true,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",74,"^P",16,"^Q",74,"^R",36,"^S",true],"^U","^V"],"~$capacity?",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",39,"^P",8,"^Q",39,"^R",17,"^S",true,"^11",["^12",["^13",["^12",[["~$m","~$s"]]]]]],"^S",true,"^6","~$pluto.core/capacity?","^N","resources/public/js/compiled/pluto/core.cljc","^R",17,"^16",["^12",[["~$m","~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",39,"^1:","^1<","^Q",39,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["~$m","~$s"]]]]]],"~$parse",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",107,"^P",7,"^Q",107,"^R",12,"^11",["^12",["^13",["^12",[["^1@","^1A"]]]]],"^Y","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `log-fn`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type ::log/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {:data        {'views/a (fn [o] [text \"hello\"])}\n    :permissions {'events/f #{}}}\n\n    or\n\n    {:errors      {'views/a [{:category ::error/invalid ..}]}\n     :permissions {'events/f #{}}}"],"^6","~$pluto.core/parse","^N","resources/public/js/compiled/pluto/core.cljc","^R",12,"^16",["^12",[["^1@","^1A"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",107,"^1:",["^4",[null,"^1<"]],"^Q",107,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["^1@","^1A"]]]]],"^Y","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `log-fn`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type ::log/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {:data        {'views/a (fn [o] [text \"hello\"])}\n    :permissions {'events/f #{}}}\n\n    or\n\n    {:errors      {'views/a [{:category ::error/invalid ..}]}\n     :permissions {'events/f #{}}}"],"~$parse-value-with",["^ ","^10",null,"^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",43,"^P",7,"^Q",43,"^R",23,"^11",["^12",["^13",["^12",[["~$capacities","~$t","~$k","~$f"]]]]]],"^6","~$pluto.core/parse-value-with","^N","resources/public/js/compiled/pluto/core.cljc","^R",23,"^16",["^12",[["^1V","~$t","~$k","~$f"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",43,"^1:",["^4",["~$cljs.core/IVector","^1<"]],"^Q",43,"^1=",4,"^1>",true,"^11",["^12",["^13",["^12",[["^1V","~$t","~$k","~$f"]]]]]],"~$order",["^ ","^T",["^ ","^N","/home/julien/Documents/Projects/extensions-fiddle/resources/public/js/compiled/pluto/core.cljc","^O",99,"^P",14,"^Q",99,"^R",19,"~:const",true],"^6","~$pluto.core/order","^N","resources/public/js/compiled/pluto/core.cljc","^R",19,"~:const-expr",["^ ","~:op","~:vector","~:env",["^ ","~:context","~:expr"],"~:form",["meta","events","views","hooks","lifecycle"],"~:items",[["^ ","^21","^1Z","~:val","meta","^23",["^ ","^24","^25"],"^26","meta","^U","^A"],["^ ","^21","^1Z","^28","events","^23",["^ ","^24","^25"],"^26","events","^U","^A"],["^ ","^21","^1Z","^28","views","^23",["^ ","^24","^25"],"^26","views","^U","^A"],["^ ","^21","^1Z","^28","hooks","^23",["^ ","^24","^25"],"^26","hooks","^U","^A"],["^ ","^21","^1Z","^28","lifecycle","^23",["^ ","^24","^25"],"^26","lifecycle","^U","^A"]],"~:children",["^27"],"^U","^1X"],"^P",1,"^1Z",true,"^O",99,"^Q",99,"^U","^1X"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:description","~:properties","~:ex-kind","~:on-installation?","~:pluto.error/overridden","~:errors","~:cause","~:on-activation?","~:default","~:on-deinstallation?","^6","~:events","~:hooks","~:documentation?","~:type","~:ephemeral?","~:string","~$global","~:event","~:components","~:capacities","~:pluto.error/format","~:on-deactivation?","~$all","~:kind","~:pluto.error/invalid","~:hierarchy","~:boolean","~:message","~:data"]],"~:order",["^2R","^2V","^2U","^2Y","^2@","^2D","^2C","^2N","^2T","^2Z","^2W","^2F","^2K","^2B","^6","^2>","^2J","^2M","^2Q","^2H","^2P","^2I","^2?","^2L","^2E","^2A","^2S","^2G","^2X","^2O"]],"^Y","Main pluto namespace entry point."]